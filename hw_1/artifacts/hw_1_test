name: Build and Publish Docker Images

on:
  push:
    branches: [ main ]

jobs:
  check:
    name: Check changed files
    outputs:
      api_service: ${{ steps.check_files.outputs.api_service }}
      note_service: ${{ steps.check_files.outputs.note_service }}
      category_service: ${{ steps.check_files.outputs.category_service }}
      file_service: ${{ steps.check_files.outputs.file_service }}
      tag_service: ${{ steps.check_files.outputs.tag_service }}
      user_service: ${{ steps.check_files.outputs.user_service }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
            echo "=============== list modified files ==============="
            git diff --name-only HEAD^ HEAD

            echo "========== check paths of modified files =========="
            git diff --name-only HEAD^ HEAD > files.txt
            while IFS= read -r file; do
              echo $file
              if [[ $file == api_service/* ]]; then
                echo "::set-output name=api_service::true"
              elif [[ $file == note_service/* ]]; then
                echo "::set-output name=note_service::true"
              elif [[ $file == category_service/* ]]; then
                echo "::set-output name=category_service::true"
              elif [[ $file == file_service/* ]]; then
                echo "::set-output name=file_service::true"
              elif [[ $file == tag_service/* ]]; then
                echo "::set-output name=tag_service::true"
              elif [[ $file == user_service/* ]]; then
                echo "::set-output name=user_service::true"
              else
                echo "file does not belong to any service"
              fi
            done < files.txt

  api_service:
    needs: check
    if: needs.check.outputs.api_service == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish to Registry
      uses: docker/build-push-action@v2
      with:
        context: api_service/
        push: true
        tags: theartofdevel/notes_system.api_service:latest

    - name: Deploy APIService
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: deploy.yml
        directory: api_service/
        key: ${{secrets.KART_SSH_PRIV_KEY}}
        inventory: |
          [all]
          kartservices.com ansible_ssh_port=${{secrets.KART_SSH_PORT}} ansible_ssh_user=${{secrets.KART_SSH_USER}} ansible_become_user=${{secrets.KART_ANSIBLE_BECOME_USER}} ansible_become_password=${{secrets.KART_ANSIBLE_BECOME_PASSWORD}}
        options: |
          --verbose
  category_service:
    needs: check
    if: needs.check.outputs.category_service == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish to Registry
      uses: docker/build-push-action@v2
      with:
        context: category_service/
        push: true
        tags: theartofdevel/notes_system.category_service:latest

    - name: Deploy CategoryService
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: deploy.yml
        directory: category_service/
        key: ${{secrets.KART_SSH_PRIV_KEY}}
        inventory: |
          [all]
          kartservices.com ansible_ssh_port=${{secrets.KART_SSH_PORT}} ansible_ssh_user=${{secrets.KART_SSH_USER}} ansible_become_user=${{secrets.KART_ANSIBLE_BECOME_USER}} ansible_become_password=${{secrets.KART_ANSIBLE_BECOME_PASSWORD}}
        options: |
          --verbose
  file_service:
    needs: check
    if: needs.check.outputs.file_service == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Publish to Registry
      uses: docker/build-push-action@v2
      with:
        context: file_service/
        push: true